/**
* Sample code is provided for educational purposes.
* No warranty of any kind, either expressed or implied by fact or law.
* Use of this item is not restricted by copyright or license terms.
*/
import com.ingrian.internal.kmip.api.crypto.KMIPCipher;
import com.ingrian.internal.kmip.api.crypto.KMIPCryptoResult;
import com.ingrian.internal.kmip.api.crypto.KMIPGCMSpec;
import com.ingrian.security.nae.IngrianProvider;
import com.ingrian.security.nae.KMIPSession;
import com.ingrian.security.nae.NAEClientCertificate;

/**
 * This sample demonstrates KMIP encryption and decryption. As of now,
 * this works only in remote mode with KMIP session. This sample 
 * shows crypto operation using GCM algorithm. User can use other
 * algorithms like AES with CBC/EBC mode and PKCS5Padding/NoPadding
 * padding and with RSA.
 * 
 * For AES (No GCM), use KMIPIvSpec spec for passing IV. In case no spec
 * is passed then random IV is generated by Key Manager and returns to the
 * user. User can fetch the encrypted result and IV using KMIPCryptoResult
 * object. For decryption operation that IV must be passed.
 * 
 * For RSA algorithm, only PKCS1Padding is supported. No spec is required
 * in this case.
 */
public class KMIPEncryptAndDecrypt {

	public static void main(String[] args) throws Exception{

		if (args.length < 6) {
			checkUsage();
		}

		String certAlias = args[0];
		String certPassword = args[1];
		String keyName = args[2];
		int tagLength = Integer.parseInt(args[3]);
		
		/**
		 * Note: For AES-GCM algorithm, same combination of nonce (IV) and key must not be reused 
		 * during encryption/decryption operations.
		 */
		String iv = args[4];
		String data = args[5];

		KMIPSession session = null;
		try {
			//opening a valid kmip session
			session = KMIPSession.getSession(new NAEClientCertificate(
					certAlias, certPassword.toCharArray()));
	
			//taking instance for GCM. Check KMIPCipher Javadoc for rest of algorithm
			KMIPCipher cipher = KMIPCipher.getInstance("AES/GCM/NoPadding");
			
			//creating a spec for GCM. Check KMIPGCMSpec Javadoc for valid values
			KMIPGCMSpec spec = new KMIPGCMSpec(tagLength, iv.getBytes());
			
			//initializing kmip cipher with the given key name, spec and session
			//in encrypt mode. Can pass UID in place of keyname. Check other
			//overloaded methods.
			cipher.init(KMIPCipher.ENCRYPT_MODE, keyName, spec, session);
			
			//Perform cipher operation and return the result in KMIPCryptoResult
			//object. This object also consist of IV in case iv is not passed
			//in other algos.
			KMIPCryptoResult result = cipher.doFinal(data.getBytes());
			
			//encrypted result in hex
			System.out.println(IngrianProvider.byteArray2Hex(result.getData()));
	
			//taking GCM cipher instance for decryption. Check KMIPCipher Javadoc 
			//for rest of algorithm
			KMIPCipher deCipher = KMIPCipher.getInstance("AES/GCM/NoPadding");
			
			//initializing kmip cipher with the given key name, spec and session
			//in decrypt mode. Can pass UID in place of keyname in other
			//overloaded methods.
			deCipher.init(KMIPCipher.DECRYPT_MODE, keyName, spec, session);
			
			//returns decrypted result
			KMIPCryptoResult decResult = deCipher.doFinal(result.getData());
			
			//printing decryption result.
			System.out.println(new String(decResult.getData()));
		} catch (Exception e) {
			e.printStackTrace();
                         System.out.println("The Cause is " + e.getMessage() + ".");
	                 throw e;
		} finally {
			session.closeSession();
		}
	}

	private static void checkUsage() {
		System.out
				.println("java KMIPEncryptAndDecrypt <certAlias> <certPassword>"
						+ " <keyName> <tagLength> <iv> <data>");
		System.exit(-1);
	}
}
